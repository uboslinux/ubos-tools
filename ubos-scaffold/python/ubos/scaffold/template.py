#!/usr/bin/python
#
# Copyright (C) 2017 and later, Indie Computing Corp. All rights reserved. License: see package.
#

import os.path
import re
import ubos.logging
import ubos.scaffold.utils
import ubos.utils

class AbstractTemplate :
    """
    Functionality common to Templates.
    """

    def pars( self ) :
        """
        Declare which parameters should be provided for this template.
        """

        return {
            'name' : {
                'index'       : 10,
                'description' : """\
Name of the package\
"""
            },
            'developer' : {
                'index'       : 20,
                'description' : """\
URL of the developer, such as your company URL\
"""
            },
            'url' : {
                'index'       : 30,
                'description' : """\
URL of the package, such as a product information page on your company website\
"""
            },
            'description' : {
                'index'       : 40,
                'description' : """\
One-line description of your package, which will be shown to the user when
they ask pacman about your package (-i flag to pacman)\
"""
            },
            'license' : {
                'index'       : 50,
                'description' : """\
License of your package, such as GPL, Apache, or Proprietary\
"""
            }
        }


    def generate( self, pars, directory ):
        """
        Do the generation

        pars: the parameters to use
        directory: the output directory
        """

        packageName = pars['name']

        if not directory :
            directory = packageName

        self.ensurePackageDirectory( directory )

        pkgbuildContent = self.pkgbuildContent( pars, directory );
        manifestContent = self.manifestContent( pars, directory );

        if pkgbuildContent:
            ubos.utils.saveFile( directory + "/PKGBUILD", pkgbuildContent.encode(), 0o644 )

        if manifestContent:
            ubos.utils.saveFile( directory + "/ubos-manifest.json", manifestContent.encode(), 0o644 )

        ubos.utils.mkdir( directory + "/appicons" );
        self.copyIcons( pars, directory + "/appicons" )

        htAccessTmpl = self.htAccessTmplContent( pars, directory )
        if htAccessTmpl:
            if not os.path.isdir( directory + "/tmpl" ) :
                ubos.utils.mkdir( directory + "/tmpl" );

            ubos.utils.saveFile( directory + "/tmpl/htaccess.tmpl", htAccessTmpl.encode(), 0o644 )

        gitIgnore = self.gitIgnoreContent( pars, directory );
        if gitIgnore:
            ubos.utils.saveFile( directory + "/.gitignore", gitIgnore.encode(), 0o644 );

        return self


    def pkgbuildContent( self, pars, directory ):
        """
        Obtain the content of the PKGBUILD file.

        pars: the parameters to use
        directory: the output directory
        return: the content
        """

        ret = self.pkgbuildContentHeader( pars, directory );

        variables = self.pkgbuildContentVars( pars, directory );
        if len(variables) > 0 :
            ret += "\n".join( map ( lambda x : f"{ x }={ variables[x] }", variables )) + "\n"


        prepareFunction = self.pkgbuildContentPrepare( pars, directory )
        buildFunction   = self.pkgbuildContentBuild(   pars, directory )
        packageFunction = self.pkgbuildContentPackage( pars, directory )
        contentOther    = self.pkgbuildContentOther(   pars, directory )

        if prepareFunction:
            prepareFunction = self.indent( prepareFunction )
            ret += f"""
prepare() {{
{prepareFunction}
}}\
"""

        if buildFunction:
            buildFunction = self.indent( buildFunction )
            ret += f"""
build() {{
{buildFunction}
}}\
"""

        if packageFunction:
            packageFunction = self.indent( packageFunction )
            ret += f"""
package() {{
{packageFunction}
}}\
"""

        if contentOther:
            ret += contentOther

        return ret


    def pkgbuildContentHeader( self, pars, directory ):
        """
        Obtain the header of the PKGBUILD file.

        pars: the parameters to use
        directory: the output directory
        return: the content
        """

        return f"""\
#
# PKGBUILD for package { pars['name'] }, generated by ubos-scaffold with template { pars['template'] }.
# For the syntax of this file, please refer to the description on the
# Arch Linux wiki here: https://wiki.archlinux.org/index.php/PKGBUILD
#
"""


    def pkgbuildContentVars( self, pars, directory ):
        """
        Obtain the bash variables in the PKGBUILD file. This returns a hash,
        so it is easier for subclasses to incrementally modify.

        pars: the parameters to use
        directory: the output directory
        return: the content
        """

        ret = {
            'pkgname'    : '$(basename $(pwd))',
            'pkgver'     : '0.1',
            'pkgrel'     : '1',
            'pkgdesc'    : '"' + pars['description'] + '"',
            'developer'  : '"' + pars['developer']   + '"',
            'url'        : '"' + pars['url']         + '"',
            'maintainer' : '"' + pars['developer']   + '"',
            'arch'       : '("any")',
            'license'    : '("' + pars['license'] + '")',
            'depends'    : """\
(
    # Insert your UBOS package dependencies here as a bash array, like this:
    # 'perl-archive-zip'
    # 'ubos-perl-utils'
)\
""",
            'makedepends' : """\
(
)\
""",
            'backup' : """\
(
    # List any config files your package uses that should NOT be overridden
    # upon the next package update if the user has modified them.
)\
""",
            'source' : """\
(
    # Insert URLs to the source(s) of your code here, usually one or more tar files
    # or such, like this:
    #     "https://download.nextcloud.com/server/releases/nextcloud-\{pkgver}.tar.bz2"
)\
""",
            'sha512sums' : """\
(
    'placeholder, generate with: makepkg -g'
)\
"""
        }

        return ret


    def pkgbuildContentPrepare( self, pars, directory ):
        """
        Obtain the content of the prepare method in the PKGBUILD file.

        pars: the parameters to use
        directory: the output directory
        return: the content
        """

        return None


    def pkgbuildContentBuild( self, pars, directory ):
        """
        Obtain the content of the build method in the PKGBUILD file.

        pars: the parameters to use
        directory: the output directory
        return: the content
        """

        return """\
    # If your package requires compilation, insert your build code here
    cd "${srcdir}/${pkgname}-${pkgver}"
    echo Building ...
"""

    def pkgbuildContentPackage( self, pars, directory ):
        """
        Obtain the content of the package method in the PKGBUILD file.

        pars: the parameters to use
        directory: the output directory
        return: the content
        """

        return """\
    # Manifest
    install -D -m0644 ${startdir}/ubos-manifest.json ${pkgdir}/ubos/lib/ubos/manifests/${pkgname}.json

    # Icons
    install -D -m0644 ${startdir}/appicons/{72x72,144x144}.png -t ${pkgdir}/ubos/http/_appicons/\{pkgname}/

    # Data directory
    mkdir -p ${pkgdir}/ubos/lib/${pkgname}

    # Config files
    mkdir -p ${pkgdir}/etc/${pkgname}

    # Template files
    install -p -m0644 ${startdir}/tmpl/* -t ${pkgdir}/ubos/share/${pkgname}/tmpl/

    # Command-line executables
    # install your command-line executables here, such as:
    # install -D -m0755 ${startdir}/my-script ${pkgdir}/usr/bin/
"""

    def pkgbuildContentOther( self, pars, directory ):
        """
        Obtain other content that goes into the PKGBUILD file.

        pars: the parameters to use
        directory: the output directory
        return: the content
        """

        return None


    def manifestContent( self, pars, directory ):
        """
        Obtain the content of the UBOS manifest.

        pars: the parameters to use
        directory: the output directory
        return: the content
        """

        return None


    def htAccessTmplContent( self, pars, directory ):
        """
        Obtain the content of the a .htaccess or Apache config fragment file.

        pars: the parameters to use
        directory: the output directory
        return: the content
        """

        return None


    def gitIgnoreContent( self, pars, directory ):
        """
        Obtain the content of the .gitignore file

        pars: the parameters to use
        directory: the output directory
        return: the content
        """

        name = pars['name']

        return f"""\
{name}-*.pkg*
"""


    def copyIcons( self, pars, directory ):
        """
        Default implementation to copy the icons.

        pars: the parameters to use
        directory: the output directory
        return: the content
        """

        for f in '72x72.png', '144x144.png':
            ubos.utils.myexec( f"cp '/usr/share/ubos-scaffold/default-appicons/{ f }' '{ directory }/'" )


    def ensurePackageDirectory( self, directory ):
        """
        Ensure that this package directory exists and isn't already used.

        directory: the package directory
        return: 0: ok. 1: directory had to be created.
        """

        ret = 0;
        if os.path.isdir( directory ):
            for f in 'PKGBUILD', 'ubos-manifest.json' :
                if os.path.exists( directory + '/' + f ):
                    ubos.logging.fatal( f"File {directory}/{f} exists: refusing to proceed" )

        elif ubos.utils.mkdir( directory ) :
            ret = 1

        else:
            ubos.logging.fatal( 'Cannot find or create', directory );

        return ret


    def indent( self, t, i=1 ):
        """
        Indent some text

        t: text
        i: how many levels
        return: indented text
        """

        replace = i * '    '
        t = re.sub( "^\s+", replace, t, flags=re.MULTILINE )
        return t
