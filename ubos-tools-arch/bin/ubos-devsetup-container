#!/usr/bin/python
#
# On Arch, set up the default development environment consisting of:
# * tools on the Arch host
# * UBOS Linux container with tools installed
# * a UBOS Linux container with tools installed
# * depending on whether --mesh or --linux is chosen, additional configurations

import argparse
import atexit
import os
import os.path
from pathlib import Path
import subprocess
import sys
import tempfile
import time

def myexec( cmd ) :
    """
    Simple wrapper for sub-commands
    """
     
    ret = subprocess.run( cmd, shell=True )
    return ret.returncode

def myexecStdout( cmd ) :
    """
    Simple wrapper for sub-commands whose stdout we want to obtain
    """

    ret = subprocess.run( "LANG=en_US.UTF-8 " + cmd, shell=True, stdout=subprocess.PIPE )
    return ret.stdout

def ensurePackage( name ) :
    """
    Ensure that a package is installed
    """

    cmd = f"pacman -Q '{name}' 2> /dev/null || sudo pacman -S --noconfirm '{name}'"
    ret = myexec( cmd )
    return ret

def ensureDirectory( name ) :
    """
    Ensure this directory and its parents exist
    """
    os.makedirs( name, exist_ok=True )

def ensureSubvol( name ) :
    """
    Ensure this subvolume and its parents exist

    return: true if it was newly made
    """
    os.makedirs( Path( name ).parent, exist_ok=True )
nu
    if not os.path.exists( name ) :
        myexec( f"sudo btrfs subvol create '{name}'" )
        return True
    else :
        return False
		
		
		
parser = argparse.ArgumentParser( description='Set up a container-based development environment for UBOS Mesh on Arch Linux' )
parser.add_argument( '--channel',            default='yellow', help='Release channel (default: yellow)' )
parser.add_argument( '--arch',               default=None,     help='Processor architecture' )
parser.add_argument( '--containerdirectory', default=None,     help='Directory for the UBOS Linux container' )
parser.add_argument( '--imagesdirectory',    default=None,     help='Directory where downloaded images are stored' )
parser.add_argument( '--containername',      default=None,     help='Name of the systemd-nspawn container' )
parser.add_argument( '--sitetemplate',       default=None,     help='URL of the site JSON template to deploy in the container' )
parser.add_argument( '--flavor', choices=['linux', 'mesh'], default='linux', help='Choose whether to do base UBOS development or Mesh development' )

args = parser.parse_args()

channel         = args.channel
arch            = args.arch
containerDir    = args.containerdirectory
imagesDir       = args.imagesdirectory
containerName   = args.containername
isMesh          = args.flavor == 'mesh'
siteTemplateUrl = args.sitetemplate

if arch is None:
    arch = myexecStdout( 'uname -m' ).strip().decode( 'UTF-8' )

if containerDir is None:
    if isMesh :
        containerDir = f"{os.environ['HOME']}/ubos-containers/ubos-mesh-development/{channel}/ubos-mesh-develop-{channel}"
    else :
        containerDir = f"{os.environ['HOME']}/ubos-containers/ubos-development/{channel}/ubos-develop-{channel}"

if containerName is None:
	containerName = f"ubos-mesh-developer-{channel}"

if siteTemplateUrl is None and isMesh:
    # take from this checked-out repo
    siteTemplateUrl = str( Path( __file__ ).parent.parent.joinpath( 'site-templates', 'mesh-default-site-development-debug.json' ).absolute())

def cleanup() :
    print( '*** Shutting down container' )
    myexec( f"sudo machinectl poweroff {containerName} > /dev/null 2>&1" )

atexit.register( cleanup )

print( '*** Upgrading system' )
myexec( 'sudo pacman -Syu' )

print( '*** Ensuring all needed packages' )
ensurePackage( 'gnu-free-fonts' )
ensurePackage( 'ttf-liberation' )
ensurePackage( 'firefox' )
ensurePackage( 'snapper' )
if isMesh :
    ensurePackage( 'jdk11-openjdk' ) # for now
    ensurePackage( 'netbeans' )

print( '*** Running iptables' )
for f in [ '/etc/iptables/iptables.rules', '/etc/iptables/ip6tables.rules' ] :
    if not os.path.exists( f ) :
        myexec( f"sudo cp /etc/iptables/empty.rules {f}" )
myexec( 'sudo systemctl enable --now iptables ip6tables' )

if os.path.exists( containerDir ) :
    print( f"*** Container director exists already, skipping right to software update: {containerDir}" )
    isFirst = False

else :
    print( f"*** Setting up for release channel {channel} on arch {arch}" )

    if imagesDir is None:
        imagesDir = f"{os.environ['HOME']}/ubos-containers/images"

    imageName = f"ubos-develop_{channel}_{arch}-container_LATEST.tar.xz"

    print( '*** Ensuring we have a UBOS Linux container image' )
    ensureDirectory( imagesDir )

    if os.path.exists( f"{imagesDir}/{imageName}" ) :
        print( '*** Have image already, not downloading nor checking for updates' )
    else :
        myexec( f"curl -o {imagesDir}/{imageName} http://depot.ubos.net/{channel}/{arch}/images/{imageName}" )

    if ensureSubvol( containerDir ) :
        print( f"*** Unpacking image into {containerDir}" )
        myexec( f"sudo tar -C {containerDir} -x -J -f {imagesDir}/{imageName}" )

    if isMesh :
        print( 'Ensuring container has ubos-mesh packages' )
        temp = tempfile.NamedTemporaryFile( delete=False )
        temp.write( b"[mesh]\nServer = http://depot.ubos.net/$channel/$arch/mesh\n" )
        temp.close()
        myexec( f"sudo mv {temp.name} {containerDir}/etc/pacman.d/repositories.d/mesh" )

        print( 'Opening up default debug ports 7777 and 7778' )
        temp = tempfile.NamedTemporaryFile( delete=False )
        temp.write( b"7777/tcp\n7778/tcp\n" )
        temp.close()
        myexec( f"sudo mv {temp.name} {containerDir}/etc/ubos/open-ports.d/java-debugging" )

    isFirst = True

print( '*** Starting container' )
cmd = f"systemd-nspawn -n -b -D {containerDir} -M {containerName}"
if len( siteTemplateUrl ) > 0 and not siteTemplateUrl.startswith( 'http:' ) and not siteTemplateUrl.startswith( 'https:' ) :
    cmd += f" --bind {siteTemplateUrl}"
myexec( f"sudo {cmd} > /dev/null 2>&1 &" ) # in the background

# wait until the container is running
while True :
    time.sleep( 5 )
    if 0 == myexec( f"sudo systemctl -M {containerName} is-system-running > /dev/null" ) :
        break

print( '*** Updating container' )
containerCmd = 'ubos-admin update -v --nokeyrefresh'
if isFirst :
    containerCmd += ' && pacman -S --noconfirm ubos-mesh-devtools'
    containerCmd += ' && snapper create-config .'
    containerCmd += ' && snapper create -d after-first-update'
myexec( f"sudo machinectl shell {containerName} /bin/bash -c '{containerCmd}'" )

if isFirst and len( siteTemplateUrl ) > 0 :
    print( '*** Deploying site to container' )
    containerCmd = f"ubos-admin createsite --from-template {siteTemplateUrl} && snapper create -d after-first-site-deploy"
    myexec( f"sudo machinectl shell {containerName} /bin/bash -c '{containerCmd}'" )

